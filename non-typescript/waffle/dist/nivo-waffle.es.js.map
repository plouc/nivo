{"version":3,"file":"nivo-waffle.es.js","sources":["../src/WaffleCell.js","../src/WaffleCellHtml.js","../src/props.js","../src/compute.js","../src/enhance.js","../src/WaffleCellTooltip.js","../src/Waffle.js","../src/ResponsiveWaffle.js","../src/WaffleHtml.js","../src/ResponsiveWaffleHtml.js","../src/WaffleCanvas.js","../src/ResponsiveWaffleCanvas.js"],"sourcesContent":["/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { pure } from '@nivo/recompose'\n\nconst WaffleCell = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    fill,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => (\n    <rect\n        width={size}\n        height={size}\n        x={x}\n        y={y}\n        fill={fill || color}\n        strokeWidth={borderWidth}\n        stroke={borderColor}\n        opacity={opacity}\n        onMouseEnter={onHover}\n        onMouseMove={onHover}\n        onMouseLeave={onLeave}\n        onClick={event => {\n            onClick({ position, color, x, y, data }, event)\n        }}\n    />\n)\n\nWaffleCell.propTypes = {\n    position: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    fill: PropTypes.string,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    data: PropTypes.object.isRequired,\n    onHover: PropTypes.func.isRequired,\n    onLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\nWaffleCell.defaultProps = {\n    data: {},\n}\nWaffleCell.displayName = 'WaffleCell'\n\nexport default pure(WaffleCell)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { pure } from '@nivo/recompose'\n\nconst WaffleCellHtml = ({\n    position,\n    size,\n    x,\n    y,\n    color,\n    opacity,\n    borderWidth,\n    borderColor,\n    data,\n    onHover,\n    onLeave,\n    onClick,\n}) => {\n    return (\n        <div\n            style={{\n                position: 'absolute',\n                top: y,\n                left: x,\n                width: size,\n                height: size,\n                background: color,\n                opacity,\n                boxSizing: 'content-box',\n                borderStyle: 'solid',\n                borderWidth: `${borderWidth}px`,\n                borderColor,\n            }}\n            onMouseEnter={onHover}\n            onMouseMove={onHover}\n            onMouseLeave={onLeave}\n            onClick={event => {\n                onClick({ position, color, x, y, data }, event)\n            }}\n        />\n    )\n}\n\nWaffleCellHtml.propTypes = {\n    position: PropTypes.number.isRequired,\n    size: PropTypes.number.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.string.isRequired,\n    data: PropTypes.object.isRequired,\n    onHover: PropTypes.func.isRequired,\n    onLeave: PropTypes.func.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\nWaffleCellHtml.defaultProps = {\n    data: {},\n}\nWaffleCellHtml.displayName = 'WaffleCellHtml'\n\nexport default pure(WaffleCellHtml)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { defsPropTypes, noop } from '@nivo/core'\nimport { ordinalColorsPropType, inheritedColorPropType } from '@nivo/colors'\nimport { LegendPropShape } from '@nivo/legends'\nimport WaffleCell from './WaffleCell'\nimport WaffleCellHtml from './WaffleCellHtml'\n\nconst commonPropTypes = {\n    total: PropTypes.number.isRequired,\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            label: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            value: PropTypes.number.isRequired,\n        })\n    ).isRequired,\n    hiddenIds: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))\n        .isRequired,\n\n    rows: PropTypes.number.isRequired,\n    columns: PropTypes.number.isRequired,\n    fillDirection: PropTypes.oneOf(['top', 'right', 'bottom', 'left']).isRequired,\n    padding: PropTypes.number.isRequired,\n\n    colors: ordinalColorsPropType.isRequired,\n    emptyColor: PropTypes.string.isRequired,\n    emptyOpacity: PropTypes.number.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: inheritedColorPropType.isRequired,\n    getBorderColor: PropTypes.func.isRequired, // computed\n\n    isInteractive: PropTypes.bool,\n    tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    tooltip: PropTypes.func,\n\n    cellSize: PropTypes.number.isRequired,\n    cells: PropTypes.array.isRequired,\n    origin: PropTypes.shape({\n        x: PropTypes.number.isRequired,\n        y: PropTypes.number.isRequired,\n    }).isRequired,\n}\n\nexport const WafflePropTypes = {\n    ...commonPropTypes,\n    cellComponent: PropTypes.func.isRequired,\n    role: PropTypes.string.isRequired,\n    ...defsPropTypes,\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n}\n\nexport const WaffleHtmlPropTypes = {\n    ...commonPropTypes,\n    cellComponent: PropTypes.func.isRequired,\n}\n\nexport const WaffleCanvasPropTypes = {\n    ...commonPropTypes,\n    pixelRatio: PropTypes.number.isRequired,\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n}\n\nconst commonDefaultProps = {\n    hiddenIds: [],\n\n    fillDirection: 'bottom',\n    padding: 1,\n\n    colors: { scheme: 'nivo' },\n    emptyColor: '#cccccc',\n    emptyOpacity: 1,\n    borderWidth: 0,\n    borderColor: { from: 'color', modifiers: [['darker', 1]] },\n    defs: [],\n    fill: [],\n\n    isInteractive: true,\n    onClick: noop,\n}\n\nexport const WaffleDefaultProps = {\n    ...commonDefaultProps,\n    cellComponent: WaffleCell,\n    role: 'img',\n    defs: [],\n    fill: [],\n    legends: [],\n}\n\nexport const WaffleHtmlDefaultProps = {\n    ...commonDefaultProps,\n    cellComponent: WaffleCellHtml,\n}\n\nexport const WaffleCanvasDefaultProps = {\n    ...commonDefaultProps,\n    legends: [],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport range from 'lodash/range'\n\n/**\n * Computes optimal cell size according to dimensions/layout/padding.\n *\n * @param {number} width\n * @param {number} height\n * @param {number} rows\n * @param {number} columns\n * @param {number} padding\n *\n * @return {number}\n */\nexport const computeCellSize = (width, height, rows, columns, padding) => {\n    const sizeX = (width - (columns - 1) * padding) / columns\n    const sizeY = (height - (rows - 1) * padding) / rows\n\n    return Math.min(sizeX, sizeY)\n}\n\n/**\n * Computes empty cells according to dimensions/layout/padding.\n *\n * @param {number}                        width\n * @param {number}                        height\n * @param {number}                        rows\n * @param {number}                        columns\n * @param {'top'|'right'|'bottom'|'left'} fillDirection\n * @param {number}                        padding\n *\n * @return {{ cells: Array, cellSize: number, origin: { x: number, y: number } } }\n */\nexport const computeGrid = (width, height, rows, columns, fillDirection, padding) => {\n    const cellSize = computeCellSize(width, height, rows, columns, padding)\n\n    const cells = []\n    switch (fillDirection) {\n        case 'top':\n            range(rows).forEach(row => {\n                range(columns).forEach(column => {\n                    cells.push({\n                        position: row * columns + column,\n                        row,\n                        column,\n                        x: column * (cellSize + padding),\n                        y: row * (cellSize + padding),\n                    })\n                })\n            })\n            break\n\n        case 'bottom':\n            range(rows - 1, -1).forEach(row => {\n                range(columns).forEach(column => {\n                    cells.push({\n                        position: row * columns + column,\n                        row,\n                        column,\n                        x: column * (cellSize + padding),\n                        y: row * (cellSize + padding),\n                    })\n                })\n            })\n            break\n\n        case 'left':\n            range(columns).forEach(column => {\n                range(rows).forEach(row => {\n                    cells.push({\n                        position: row * columns + column,\n                        row,\n                        column,\n                        x: column * (cellSize + padding),\n                        y: row * (cellSize + padding),\n                    })\n                })\n            })\n            break\n\n        case 'right':\n            range(columns - 1, -1).forEach(column => {\n                range(rows - 1, -1).forEach(row => {\n                    cells.push({\n                        position: row * columns + column,\n                        row,\n                        column,\n                        x: column * (cellSize + padding),\n                        y: row * (cellSize + padding),\n                    })\n                })\n            })\n            break\n\n        default:\n            throw new Error(`Invalid fill direction provided: ${fillDirection}`)\n    }\n\n    const origin = {\n        x: (width - (cellSize * columns + padding * (columns - 1))) / 2,\n        y: (height - (cellSize * rows + padding * (rows - 1))) / 2,\n    }\n\n    return { cells, cellSize, origin }\n}\n\nexport const applyDataToGrid = (_cells, data) => {\n    const cells = _cells.map(cell => ({ ...cell }))\n\n    data.forEach(datum => {\n        range(datum.startAt, datum.endAt).forEach(position => {\n            const cell = cells[position]\n            if (cell !== undefined) {\n                cell.data = datum\n                cell.groupIndex = datum.groupIndex\n                cell.color = datum.color\n            }\n        })\n    })\n\n    return cells\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { withDimensions, withTheme, withMotion, bindDefs } from '@nivo/core'\nimport { getOrdinalColorScale, getInheritedColorGenerator } from '@nivo/colors'\nimport { compose, defaultProps, withPropsOnChange, withState, pure } from '@nivo/recompose'\nimport * as props from './props'\nimport { computeGrid } from './compute'\n\nconst commonEnhancers = [\n    withDimensions(),\n    withTheme(),\n    withMotion(),\n    withPropsOnChange(['colors'], ({ colors }) => ({\n        getColor: getOrdinalColorScale(colors, 'id'),\n    })),\n    withPropsOnChange(['borderColor', 'theme'], ({ borderColor, theme }) => ({\n        getBorderColor: getInheritedColorGenerator(borderColor, theme),\n    })),\n    withState('currentCell', 'setCurrentCell', null),\n    withPropsOnChange(['rows', 'columns', 'total'], ({ rows, columns, total }) => ({\n        unit: total / (rows * columns),\n    })),\n    withPropsOnChange(\n        ['width', 'height', 'rows', 'columns', 'fillDirection', 'padding'],\n        ({ width, height, rows, columns, fillDirection, padding }) => {\n            return computeGrid(width, height, rows, columns, fillDirection, padding)\n        }\n    ),\n    withPropsOnChange(\n        ['data', 'unit', 'getColor', 'hiddenIds'],\n        ({ data, unit, getColor, hiddenIds }) => {\n            let currentPosition = 0\n\n            return {\n                computedData: data.map((datum, groupIndex) => {\n                    if (!hiddenIds.includes(datum.id)) {\n                        const enhancedDatum = {\n                            ...datum,\n                            groupIndex,\n                            startAt: currentPosition,\n                            endAt: currentPosition + Math.round(datum.value / unit),\n                            color: getColor(datum),\n                        }\n\n                        currentPosition = enhancedDatum.endAt\n\n                        return enhancedDatum\n                    }\n\n                    return {\n                        ...datum,\n                        groupIndex,\n                        startAt: currentPosition,\n                        endAt: currentPosition,\n                        color: getColor(datum),\n                    }\n                }),\n            }\n        }\n    ),\n    withPropsOnChange(['computedData'], ({ computedData }) => ({\n        legendData: computedData.map(datum => ({\n            id: datum.id,\n            label: datum.id,\n            color: datum.color,\n            fill: datum.fill,\n        })),\n    })),\n]\n\nexport default Component => {\n    const implDefaultProps = props[`${Component.displayName}DefaultProps`]\n\n    switch (Component.displayName) {\n        case 'Waffle':\n            return compose(\n                ...[\n                    defaultProps(implDefaultProps),\n                    ...commonEnhancers,\n                    withMotion(),\n                    withPropsOnChange(\n                        ['computedData', 'defs', 'fill'],\n                        ({ computedData, defs, fill }) => ({\n                            defs: bindDefs(defs, computedData, fill, { targetKey: 'fill' }),\n                        })\n                    ),\n                    pure,\n                ]\n            )(Component)\n\n        case 'WaffleHtml':\n            return compose(\n                ...[defaultProps(implDefaultProps), ...commonEnhancers, withMotion(), pure]\n            )(Component)\n\n        case 'WaffleCanvas':\n            return compose(...[defaultProps(implDefaultProps), ...commonEnhancers, pure])(Component)\n    }\n\n    return Component\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst WaffleCellTooltip = ({\n    position,\n    row,\n    column,\n    color,\n    data,\n    theme,\n    tooltipFormat,\n    tooltip,\n}) => (\n    <BasicTooltip\n        id={data.label}\n        value={data.value}\n        enableChip={true}\n        color={color}\n        theme={theme}\n        format={tooltipFormat}\n        renderContent={\n            typeof tooltip === 'function'\n                ? tooltip.bind(null, {\n                      position,\n                      row,\n                      column,\n                      color,\n                      ...data,\n                  })\n                : null\n        }\n    />\n)\n\nWaffleCellTooltip.displayName = 'WaffleCellTooltip'\nWaffleCellTooltip.propTypes = {\n    position: PropTypes.number.isRequired,\n    row: PropTypes.number.isRequired,\n    column: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired,\n    data: PropTypes.object.isRequired,\n    theme: PropTypes.object.isRequired,\n    tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    tooltip: PropTypes.func,\n}\n\nexport default WaffleCellTooltip\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, Component, Fragment } from 'react'\nimport partial from 'lodash/partial'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { setDisplayName } from '@nivo/recompose'\nimport { LegacyContainer, SvgWrapper } from '@nivo/core'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { WafflePropTypes } from './props'\nimport enhance from './enhance'\nimport { applyDataToGrid } from './compute'\nimport WaffleCellTooltip from './WaffleCellTooltip'\n\nexport class Waffle extends Component {\n    static propTypes = WafflePropTypes\n\n    handleCellHover = (showTooltip, cell, event) => {\n        const { setCurrentCell, theme, tooltipFormat, tooltip } = this.props\n\n        setCurrentCell(cell)\n\n        if (!cell.data) return\n\n        showTooltip(\n            <WaffleCellTooltip\n                position={cell.position}\n                row={cell.row}\n                column={cell.column}\n                color={cell.color}\n                data={cell.data}\n                theme={theme}\n                tooltipFormat={tooltipFormat}\n                tooltip={tooltip}\n            />,\n            event\n        )\n    }\n\n    handleCellLeave = hideTooltip => {\n        this.props.setCurrentCell(null)\n        hideTooltip()\n    }\n\n    render() {\n        const {\n            hiddenIds,\n\n            // dimensions\n            margin,\n            width,\n            height,\n            outerWidth,\n            outerHeight,\n\n            // styling\n            cellComponent,\n            emptyColor,\n            emptyOpacity,\n            borderWidth,\n            getBorderColor,\n            theme,\n            defs,\n\n            // motion\n            animate,\n            motionStiffness,\n            motionDamping,\n\n            // interactivity\n            isInteractive,\n            onClick,\n\n            // computed\n            cells,\n            cellSize,\n            origin,\n            computedData,\n            legendData,\n\n            legends,\n            role,\n        } = this.props\n\n        cells.forEach(cell => {\n            cell.color = emptyColor\n        })\n\n        return (\n            <LegacyContainer\n                isInteractive={isInteractive}\n                theme={theme}\n                animate={animate}\n                motionDamping={motionDamping}\n                motionStiffness={motionStiffness}\n            >\n                {({ showTooltip, hideTooltip }) => {\n                    const onHover = partial(this.handleCellHover, showTooltip)\n                    const onLeave = partial(this.handleCellLeave, hideTooltip)\n\n                    let cellsRender\n                    if (animate === true) {\n                        const springConfig = {\n                            stiffness: motionStiffness,\n                            damping: motionDamping,\n                        }\n\n                        cellsRender = (\n                            <TransitionMotion\n                                styles={computedData.map(datum => ({\n                                    key: datum.id,\n                                    data: datum,\n                                    style: {\n                                        startAt: spring(datum.startAt, springConfig),\n                                        endAt: spring(datum.endAt, springConfig),\n                                    },\n                                }))}\n                            >\n                                {interpolatedStyles => {\n                                    const computedCells = applyDataToGrid(\n                                        cells,\n                                        interpolatedStyles.map(s => ({\n                                            ...s.data,\n                                            startAt: Math.round(s.style.startAt),\n                                            endAt: Math.round(s.style.endAt),\n                                        })),\n                                        hiddenIds\n                                    )\n\n                                    return (\n                                        <Fragment>\n                                            {computedCells.map(cell =>\n                                                createElement(cellComponent, {\n                                                    key: cell.position,\n                                                    position: cell.position,\n                                                    size: cellSize,\n                                                    x: cell.x,\n                                                    y: cell.y,\n                                                    color: cell.color,\n                                                    fill: cell.data && cell.data.fill,\n                                                    opacity: cell.data ? 1 : emptyOpacity,\n                                                    borderWidth,\n                                                    borderColor: getBorderColor(cell),\n                                                    data: cell.data,\n                                                    onHover: partial(onHover, cell),\n                                                    onLeave,\n                                                    onClick,\n                                                })\n                                            )}\n                                        </Fragment>\n                                    )\n                                }}\n                            </TransitionMotion>\n                        )\n                    } else {\n                        const computedCells = applyDataToGrid(cells, computedData, hiddenIds)\n\n                        cellsRender = (\n                            <Fragment>\n                                {computedCells.map(cell =>\n                                    createElement(cellComponent, {\n                                        key: cell.position,\n                                        position: cell.position,\n                                        size: cellSize,\n                                        x: cell.x,\n                                        y: cell.y,\n                                        color: cell.color,\n                                        fill: cell.data && cell.data.fill,\n                                        opacity: cell.data ? 1 : emptyOpacity,\n                                        borderWidth,\n                                        borderColor: getBorderColor(cell),\n                                        data: cell.data,\n                                        onHover: partial(onHover, cell),\n                                        onLeave,\n                                        onClick,\n                                    })\n                                )}\n                            </Fragment>\n                        )\n                    }\n\n                    return (\n                        <SvgWrapper\n                            width={outerWidth}\n                            height={outerHeight}\n                            margin={margin}\n                            defs={defs}\n                            theme={theme}\n                            role={role}\n                        >\n                            <g transform={`translate(${origin.x}, ${origin.y})`}>{cellsRender}</g>\n                            {legends.map((legend, i) => (\n                                <BoxLegendSvg\n                                    key={i}\n                                    {...legend}\n                                    containerWidth={width}\n                                    containerHeight={height}\n                                    data={legendData}\n                                    theme={theme}\n                                />\n                            ))}\n                        </SvgWrapper>\n                    )\n                }}\n            </LegacyContainer>\n        )\n    }\n}\n\nWaffle.displayName = 'Waffle'\n\nexport default setDisplayName(Waffle.displayName)(enhance(Waffle))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Waffle from './Waffle'\n\nconst ResponsiveWaffle = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Waffle width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveWaffle\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, Component, Fragment } from 'react'\nimport partial from 'lodash/partial'\nimport { setDisplayName } from '@nivo/recompose'\nimport { TransitionMotion, spring } from 'react-motion'\nimport { LegacyContainer } from '@nivo/core'\nimport enhance from './enhance'\nimport { WaffleHtmlPropTypes } from './props'\nimport { applyDataToGrid } from './compute'\nimport WaffleCellTooltip from './WaffleCellTooltip'\n\nclass WaffleHtml extends Component {\n    static propTypes = WaffleHtmlPropTypes\n\n    handleCellHover = (showTooltip, cell, event) => {\n        const { setCurrentCell, theme, tooltipFormat, tooltip } = this.props\n\n        setCurrentCell(cell)\n\n        if (!cell.data) return\n\n        showTooltip(\n            <WaffleCellTooltip\n                position={cell.position}\n                row={cell.row}\n                column={cell.column}\n                color={cell.color}\n                data={cell.data}\n                theme={theme}\n                tooltipFormat={tooltipFormat}\n                tooltip={tooltip}\n            />,\n            event\n        )\n    }\n\n    handleCellLeave = hideTooltip => {\n        this.props.setCurrentCell(null)\n        hideTooltip()\n    }\n\n    render() {\n        const {\n            // dimensions\n            margin,\n            outerWidth,\n            outerHeight,\n\n            // styling\n            cellComponent,\n            emptyColor,\n            emptyOpacity,\n            borderWidth,\n            getBorderColor,\n            theme,\n\n            // motion\n            animate,\n            motionStiffness,\n            motionDamping,\n\n            // interactivity\n            isInteractive,\n            onClick,\n\n            // computed\n            cells,\n            cellSize,\n            origin,\n            computedData,\n        } = this.props\n\n        cells.forEach(cell => {\n            cell.color = emptyColor\n        })\n\n        return (\n            <LegacyContainer\n                isInteractive={isInteractive}\n                theme={theme}\n                animate={animate}\n                motionDamping={motionDamping}\n                motionStiffness={motionStiffness}\n            >\n                {({ showTooltip, hideTooltip }) => {\n                    const onHover = partial(this.handleCellHover, showTooltip)\n                    const onLeave = partial(this.handleCellLeave, hideTooltip)\n\n                    let cellsRender\n                    if (animate === true) {\n                        const springConfig = {\n                            stiffness: motionStiffness,\n                            damping: motionDamping,\n                        }\n\n                        cellsRender = (\n                            <TransitionMotion\n                                styles={computedData.map(datum => ({\n                                    key: datum.id,\n                                    data: datum,\n                                    style: {\n                                        startAt: spring(datum.startAt, springConfig),\n                                        endAt: spring(datum.endAt, springConfig),\n                                    },\n                                }))}\n                            >\n                                {interpolatedStyles => {\n                                    const computedCells = applyDataToGrid(\n                                        cells,\n                                        interpolatedStyles.map(s => ({\n                                            ...s.data,\n                                            startAt: Math.round(s.style.startAt),\n                                            endAt: Math.round(s.style.endAt),\n                                        }))\n                                    )\n\n                                    return (\n                                        <Fragment>\n                                            {computedCells.map(cell =>\n                                                createElement(cellComponent, {\n                                                    key: cell.position,\n                                                    position: cell.position,\n                                                    size: cellSize,\n                                                    x: cell.x,\n                                                    y: cell.y,\n                                                    color: cell.color,\n                                                    fill: cell.data && cell.data.fill,\n                                                    opacity: cell.data ? 1 : emptyOpacity,\n                                                    borderWidth,\n                                                    borderColor: getBorderColor(cell),\n                                                    data: cell.data,\n                                                    onHover: partial(onHover, cell),\n                                                    onLeave,\n                                                    onClick,\n                                                })\n                                            )}\n                                        </Fragment>\n                                    )\n                                }}\n                            </TransitionMotion>\n                        )\n                    } else {\n                        const computedCells = applyDataToGrid(cells, computedData)\n\n                        cellsRender = (\n                            <Fragment>\n                                {computedCells.map(cell =>\n                                    createElement(cellComponent, {\n                                        key: cell.position,\n                                        position: cell.position,\n                                        size: cellSize,\n                                        x: cell.x,\n                                        y: cell.y,\n                                        color: cell.color,\n                                        fill: cell.data && cell.data.fill,\n                                        opacity: cell.data ? 1 : emptyOpacity,\n                                        borderWidth,\n                                        borderColor: getBorderColor(cell),\n                                        data: cell.data,\n                                        onHover: partial(onHover, cell),\n                                        onLeave,\n                                        onClick,\n                                    })\n                                )}\n                            </Fragment>\n                        )\n                    }\n\n                    return (\n                        <div\n                            style={{\n                                position: 'relative',\n                                width: outerWidth,\n                                height: outerHeight,\n                            }}\n                        >\n                            <div\n                                style={{\n                                    position: 'absolute',\n                                    top: margin.top + origin.y,\n                                    left: margin.left + origin.x,\n                                }}\n                            >\n                                {cellsRender}\n                            </div>\n                        </div>\n                    )\n                }}\n            </LegacyContainer>\n        )\n    }\n}\n\nWaffleHtml.displayName = 'WaffleHtml'\n\nexport default setDisplayName(WaffleHtml.displayName)(enhance(WaffleHtml))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport WaffleHtml from './WaffleHtml'\n\nconst ResponsiveWaffleHtml = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <WaffleHtml width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveWaffleHtml\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Component } from 'react'\nimport range from 'lodash/range'\nimport { setDisplayName } from '@nivo/recompose'\nimport { isCursorInRect, getRelativeCursor, LegacyContainer } from '@nivo/core'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport enhance from './enhance'\nimport { WaffleCanvasPropTypes } from './props'\nimport WaffleCellTooltip from './WaffleCellTooltip'\n\nconst findCellUnderCursor = (cells, cellSize, origin, margin, x, y) =>\n    cells.find(cell =>\n        isCursorInRect(\n            cell.x + origin.x + margin.left,\n            cell.y + origin.y + margin.top,\n            cellSize,\n            cellSize,\n            x,\n            y\n        )\n    )\n\nclass WaffleCanvas extends Component {\n    static propTypes = WaffleCanvasPropTypes\n\n    componentDidMount() {\n        this.ctx = this.surface.getContext('2d')\n        this.draw(this.props)\n    }\n\n    componentDidUpdate() {\n        this.ctx = this.surface.getContext('2d')\n        this.draw(this.props)\n    }\n\n    draw(props) {\n        const {\n            pixelRatio,\n\n            margin,\n            width,\n            height,\n            outerWidth,\n            outerHeight,\n\n            getColor,\n            emptyColor,\n            emptyOpacity,\n            borderWidth,\n            getBorderColor,\n\n            cells,\n            cellSize,\n            origin,\n            computedData,\n            legendData,\n\n            legends,\n\n            theme,\n        } = props\n\n        this.surface.width = outerWidth * pixelRatio\n        this.surface.height = outerHeight * pixelRatio\n\n        this.ctx.scale(pixelRatio, pixelRatio)\n        this.ctx.fillStyle = theme.background\n        this.ctx.fillRect(0, 0, outerWidth, outerHeight)\n        this.ctx.translate(margin.left, margin.top)\n\n        cells.forEach(cell => {\n            cell.color = emptyColor\n        })\n\n        computedData.forEach(datum => {\n            range(datum.startAt, datum.endAt).forEach(position => {\n                const cell = cells[position]\n                if (cell !== undefined) {\n                    cell.data = datum\n                    cell.groupIndex = datum.groupIndex\n                    cell.color = getColor(datum)\n                }\n            })\n        })\n\n        cells.forEach(cell => {\n            this.ctx.save()\n            this.ctx.globalAlpha = cell.data ? 1 : emptyOpacity\n\n            this.ctx.fillStyle = cell.color\n            this.ctx.fillRect(cell.x + origin.x, cell.y + origin.y, cellSize, cellSize)\n\n            if (borderWidth > 0) {\n                this.ctx.strokeStyle = getBorderColor(cell)\n                this.ctx.lineWidth = borderWidth\n                this.ctx.strokeRect(cell.x + origin.x, cell.y + origin.y, cellSize, cellSize)\n            }\n\n            this.ctx.restore()\n        })\n\n        legends.forEach(legend => {\n            renderLegendToCanvas(this.ctx, {\n                ...legend,\n                data: legendData,\n                containerWidth: width,\n                containerHeight: height,\n                theme,\n            })\n        })\n    }\n\n    handleMouseHover = (showTooltip, hideTooltip) => event => {\n        const { isInteractive, margin, theme, cells, cellSize, origin, tooltipFormat, tooltip } =\n            this.props\n\n        if (!isInteractive || !cells) return\n\n        const [x, y] = getRelativeCursor(this.surface, event)\n        const cell = findCellUnderCursor(cells, cellSize, origin, margin, x, y)\n\n        if (cell !== undefined && cell.data) {\n            showTooltip(\n                <WaffleCellTooltip\n                    position={cell.position}\n                    row={cell.row}\n                    column={cell.column}\n                    color={cell.color}\n                    data={cell.data}\n                    theme={theme}\n                    tooltipFormat={tooltipFormat}\n                    tooltip={tooltip}\n                />,\n                event\n            )\n        } else {\n            hideTooltip()\n        }\n    }\n\n    handleMouseLeave = hideTooltip => () => {\n        if (this.props.isInteractive !== true) return\n\n        hideTooltip()\n    }\n\n    handleClick = event => {\n        const { isInteractive, margin, onClick, cells, cellSize, origin } = this.props\n\n        if (!isInteractive || !cells) return\n\n        const [x, y] = getRelativeCursor(this.surface, event)\n        const cell = findCellUnderCursor(cells, cellSize, origin, margin, x, y)\n        if (cell !== undefined) onClick(cell, event)\n    }\n\n    render() {\n        const { outerWidth, outerHeight, pixelRatio, isInteractive, theme } = this.props\n\n        return (\n            <LegacyContainer isInteractive={isInteractive} theme={theme} animate={false}>\n                {({ showTooltip, hideTooltip }) => (\n                    <canvas\n                        ref={surface => {\n                            this.surface = surface\n                        }}\n                        width={outerWidth * pixelRatio}\n                        height={outerHeight * pixelRatio}\n                        style={{\n                            width: outerWidth,\n                            height: outerHeight,\n                        }}\n                        onMouseEnter={this.handleMouseHover(showTooltip, hideTooltip)}\n                        onMouseMove={this.handleMouseHover(showTooltip, hideTooltip)}\n                        onMouseLeave={this.handleMouseLeave(hideTooltip)}\n                        onClick={this.handleClick}\n                    />\n                )}\n            </LegacyContainer>\n        )\n    }\n}\n\nWaffleCanvas.displayName = 'WaffleCanvas'\n\nexport default setDisplayName(WaffleCanvas.displayName)(enhance(WaffleCanvas))\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport WaffleCanvas from './WaffleCanvas'\n\nconst ResponsiveWaffleCanvas = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <WaffleCanvas width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveWaffleCanvas\n"],"names":["WaffleCell","position","size","x","y","color","fill","opacity","borderWidth","borderColor","data","onHover","onLeave","onClick","_jsx","width","height","strokeWidth","stroke","onMouseEnter","onMouseMove","onMouseLeave","event","propTypes","PropTypes","number","isRequired","string","object","func","defaultProps","displayName","pure","WaffleCellHtml","style","top","left","background","boxSizing","borderStyle","commonPropTypes","total","arrayOf","shape","id","oneOfType","label","value","hiddenIds","rows","columns","fillDirection","oneOf","padding","colors","ordinalColorsPropType","emptyColor","emptyOpacity","inheritedColorPropType","getBorderColor","isInteractive","bool","tooltipFormat","tooltip","cellSize","cells","array","origin","WafflePropTypes","cellComponent","role","defsPropTypes","legends","LegendPropShape","WaffleHtmlPropTypes","WaffleCanvasPropTypes","pixelRatio","commonDefaultProps","scheme","from","modifiers","defs","noop","WaffleDefaultProps","WaffleHtmlDefaultProps","WaffleCanvasDefaultProps","window","devicePixelRatio","computeGrid","sizeX","sizeY","Math","min","computeCellSize","range","forEach","row","column","push","Error","applyDataToGrid","_cells","map","cell","datum","startAt","endAt","undefined","groupIndex","commonEnhancers","withDimensions","withTheme","withMotion","withPropsOnChange","getColor","getOrdinalColorScale","theme","getInheritedColorGenerator","withState","unit","currentPosition","computedData","includes","enhancedDatum","round","legendData","Component","implDefaultProps","props","compose","bindDefs","targetKey","WaffleCellTooltip","BasicTooltip","enableChip","format","renderContent","bind","Waffle","handleCellHover","showTooltip","_this","setCurrentCell","handleCellLeave","hideTooltip","render","this","margin","outerWidth","outerHeight","animate","motionStiffness","motionDamping","LegacyContainer","cellsRender","partial","_this2","springConfig","stiffness","damping","TransitionMotion","styles","key","spring","interpolatedStyles","computedCells","s","Fragment","createElement","_jsxs","SvgWrapper","transform","legend","i","BoxLegendSvg","containerWidth","containerHeight","setDisplayName","enhance","ResponsiveWaffle","ResponsiveWrapper","WaffleHtml","ResponsiveWaffleHtml","findCellUnderCursor","find","isCursorInRect","WaffleCanvas","handleMouseHover","getRelativeCursor","surface","handleMouseLeave","handleClick","componentDidMount","ctx","getContext","draw","componentDidUpdate","scale","fillStyle","fillRect","translate","save","globalAlpha","strokeStyle","lineWidth","strokeRect","restore","renderLegendToCanvas","ref","_this3","ResponsiveWaffleCanvas"],"mappings":"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"}