{"version":3,"file":"nivo-recompose.es.js","sources":["../src/getDisplayName.ts","../src/setStatic.ts","../src/setDisplayName.ts","../src/shallowEqual.ts","../src/wrapDisplayName.ts","../src/shouldUpdate.ts","../src/pure.ts","../src/compose.ts","../src/utils/pick.ts","../src/withPropsOnChange.ts","../src/defaultProps.ts","../src/withProps.ts","../src/mapProps.ts","../src/setPropTypes.ts","../src/withState.ts"],"sourcesContent":["import { ComponentType } from 'react'\n\nexport const getDisplayName = (component: ComponentType<any> | string): string | undefined => {\n    if (typeof component === 'string') {\n        return component\n    }\n\n    if (!component) {\n        return undefined\n    }\n\n    return component.displayName || component.name || 'Component'\n}\n","import { ComponentType } from 'react'\n\nexport const setStatic =\n    (key: string, value: any): (<T extends ComponentType<any>>(component: T) => T) =>\n    BaseComponent => {\n        /* eslint-disable no-param-reassign */\n        // @ts-expect-error there's no way to type this\n        BaseComponent[key] = value\n        /* eslint-enable no-param-reassign */\n        return BaseComponent\n    }\n","import { ComponentType } from 'react'\nimport { setStatic } from './setStatic'\n\nexport const setDisplayName = (\n    displayName: string\n): (<T extends ComponentType<any>>(component: T) => T) => setStatic('displayName', displayName)\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule shallowEqual\n * @typechecks\n */\n\n/* eslint-disable no-self-compare */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: unknown, y: unknown): boolean {\n    // SameValue algorithm\n    if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        // Added the nonzero y check to make Flow happy, but it is redundant\n        return x !== 0 || y !== 0 || 1 / x === 1 / y\n    }\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nexport function shallowEqual(\n    objA: Record<string, unknown>,\n    objB: Record<string, unknown>\n): boolean {\n    if (is(objA, objB)) {\n        return true\n    }\n\n    if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n        return false\n    }\n\n    const keysA = Object.keys(objA)\n    const keysB = Object.keys(objB)\n\n    if (keysA.length !== keysB.length) {\n        return false\n    }\n\n    // Test for A's keys different from B.\n    for (let i = 0; i < keysA.length; i++) {\n        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n            return false\n        }\n    }\n\n    return true\n}\n","import { ComponentType } from 'react'\nimport { getDisplayName } from './getDisplayName'\n\nexport const wrapDisplayName = (BaseComponent: ComponentType<any>, hocName: string): string =>\n    `${hocName}(${getDisplayName(BaseComponent)})`\n","import { Component, createFactory } from 'react'\nimport { setDisplayName } from './setDisplayName'\nimport { InferableComponentEnhancer, PredicateDiff } from './types'\nimport { wrapDisplayName } from './wrapDisplayName'\n\nexport const shouldUpdate =\n    <TProps extends Record<string, unknown>>(\n        test: PredicateDiff<TProps>\n        // eslint-disable-next-line @typescript-eslint/ban-types\n    ): InferableComponentEnhancer<{}> =>\n    (BaseComponent: any): any => {\n        const factory = createFactory(BaseComponent)\n        class ShouldUpdate extends Component {\n            shouldComponentUpdate(nextProps: any) {\n                // @ts-expect-error not type-able\n                return test(this.props, nextProps)\n            }\n\n            render() {\n                // @ts-expect-error not type-able\n                return factory(this.props)\n            }\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n            return setDisplayName(wrapDisplayName(BaseComponent, 'shouldUpdate'))(ShouldUpdate)\n        }\n        return ShouldUpdate\n    }\n","import { ComponentType } from 'react'\nimport { setDisplayName } from './setDisplayName'\nimport { shallowEqual } from './shallowEqual'\nimport { shouldUpdate } from './shouldUpdate'\nimport { wrapDisplayName } from './wrapDisplayName'\n\nexport const pure = <TProps>(component: ComponentType<TProps>): ComponentType<TProps> => {\n    const hoc = shouldUpdate((props, nextProps) => !shallowEqual(props, nextProps))\n\n    if (process.env.NODE_ENV !== 'production') {\n        return setDisplayName(wrapDisplayName(component, 'pure'))(hoc(component))\n    }\n\n    return hoc(component)\n}\n","import { ComponentClass, ComponentType } from 'react'\n\ninterface ComponentEnhancer<TInner, TOuter> {\n    (component: ComponentType<TInner>): ComponentClass<TOuter>\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const compose = <TInner, TOuter>(...funcs: Function[]): ComponentEnhancer<TInner, TOuter> =>\n    funcs.reduce<ComponentEnhancer<TInner, TOuter>>(\n        (a, b) =>\n            (...args) =>\n                a(b(...args)),\n        arg => arg as any\n    ) as ComponentEnhancer<TInner, TOuter>\n","export const pick = (obj: Record<string, unknown>, keys: string[]) => {\n    const result: Record<string, unknown> = {}\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        // eslint-disable-next-line no-prototype-builtins\n        if (obj.hasOwnProperty(key)) {\n            result[key] = obj[key]\n        }\n    }\n    return result\n}\n","import { Component, createFactory } from 'react'\nimport { polyfill } from 'react-lifecycles-compat'\nimport { setDisplayName } from './setDisplayName'\nimport { shallowEqual } from './shallowEqual'\nimport { InferableComponentEnhancerWithProps, Mapper, PredicateDiff } from './types'\nimport { pick } from './utils'\nimport { wrapDisplayName } from './wrapDisplayName'\n\nexport const withPropsOnChange =\n    <TInner, TOuter extends Record<string, unknown>>(\n        shouldMapOrKeys: string[] | PredicateDiff<TOuter>,\n        propsMapper: Mapper<TOuter, TInner>\n    ): InferableComponentEnhancerWithProps<TInner & TOuter, TOuter> =>\n    (BaseComponent: any): any => {\n        const factory = createFactory(BaseComponent)\n        const shouldMap =\n            typeof shouldMapOrKeys === 'function'\n                ? shouldMapOrKeys\n                : (props: TOuter, nextProps: TOuter) =>\n                      !shallowEqual(pick(props, shouldMapOrKeys), pick(nextProps, shouldMapOrKeys))\n\n        class WithPropsOnChange extends Component<TOuter> {\n            state = {\n                computedProps: propsMapper(this.props),\n                prevProps: this.props,\n            }\n\n            static getDerivedStateFromProps(\n                nextProps: TOuter,\n                prevState: WithPropsOnChange['state']\n            ) {\n                if (shouldMap(prevState.prevProps, nextProps)) {\n                    return {\n                        computedProps: propsMapper(nextProps),\n                        prevProps: nextProps,\n                    }\n                }\n\n                return {\n                    prevProps: nextProps,\n                }\n            }\n\n            render() {\n                // @ts-expect-error due to how factory is typed\n                return factory({\n                    ...this.props,\n                    ...this.state.computedProps,\n                })\n            }\n        }\n\n        polyfill(WithPropsOnChange)\n\n        if (process.env.NODE_ENV !== 'production') {\n            return setDisplayName(wrapDisplayName(BaseComponent, 'withPropsOnChange'))(\n                WithPropsOnChange\n            )\n        }\n\n        return WithPropsOnChange\n    }\n","import { createFactory } from 'react'\nimport { setDisplayName } from './setDisplayName'\nimport { DefaultingInferableComponentEnhancer } from './types'\nimport { wrapDisplayName } from './wrapDisplayName'\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const defaultProps =\n    <T = {}>(props: T): DefaultingInferableComponentEnhancer<T> =>\n    (BaseComponent: any): any => {\n        const factory = createFactory(BaseComponent)\n        const DefaultProps = (ownerProps: any) => factory(ownerProps)\n        DefaultProps.defaultProps = props\n        if (process.env.NODE_ENV !== 'production') {\n            return setDisplayName(wrapDisplayName(BaseComponent, 'defaultProps'))(DefaultProps)\n        }\n        return DefaultProps\n    }\n","import { mapProps } from './mapProps'\nimport { setDisplayName } from './setDisplayName'\nimport { InferableComponentEnhancerWithProps, Mapper } from './types'\nimport { wrapDisplayName } from './wrapDisplayName'\n\nexport const withProps = <TInner, TOuter>(\n    createProps: TInner | Mapper<TOuter, TInner>\n): InferableComponentEnhancerWithProps<TInner & TOuter, TOuter> => {\n    const hoc = mapProps(props => ({\n        ...(props as any),\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        ...(typeof createProps === 'function' ? (createProps as Function)(props) : createProps),\n    }))\n    if (process.env.NODE_ENV !== 'production') {\n        return ((BaseComponent: any) =>\n            setDisplayName(wrapDisplayName(BaseComponent, 'withProps'))(hoc(BaseComponent))) as any\n    }\n    return hoc as InferableComponentEnhancerWithProps<TInner & TOuter, TOuter>\n}\n","import { createFactory } from 'react'\nimport { setDisplayName } from './setDisplayName'\nimport { InferableComponentEnhancerWithProps, Mapper } from './types'\nimport { wrapDisplayName } from './wrapDisplayName'\n\nexport const mapProps =\n    <TInner, TOuter>(\n        propsMapper: Mapper<TOuter, TInner>\n    ): InferableComponentEnhancerWithProps<TInner, TOuter> =>\n    (BaseComponent: any): any => {\n        const factory = createFactory(BaseComponent)\n        const MapProps = (props: any) => factory(propsMapper(props))\n        if (process.env.NODE_ENV !== 'production') {\n            return setDisplayName(wrapDisplayName(BaseComponent, 'mapProps'))(MapProps)\n        }\n        return MapProps\n    }\n","import { ComponentType, ValidationMap } from 'react'\nimport { setStatic } from './setStatic'\n\nexport const setPropTypes = <P>(\n    propTypes: ValidationMap<P>\n): (<T extends ComponentType<P>>(component: T) => T) => setStatic('propTypes', propTypes)\n","import { createFactory, Component } from 'react'\nimport { setDisplayName } from './setDisplayName'\nimport { InferableComponentEnhancerWithProps, Mapper } from './types'\nimport { wrapDisplayName } from './wrapDisplayName'\n\ntype StateProps<TState, TStateName extends string, TStateUpdaterName extends string> = {\n    [stateName in TStateName]: TState\n} & { [stateUpdateName in TStateUpdaterName]: (state: TState) => TState }\n\nexport const withState =\n    <TOuter, TState, TStateName extends string, TStateUpdaterName extends string>(\n        stateName: TStateName,\n        stateUpdaterName: TStateUpdaterName,\n        initialState: TState | Mapper<TOuter, TState>\n    ): InferableComponentEnhancerWithProps<\n        StateProps<TState, TStateName, TStateUpdaterName>,\n        TOuter\n    > =>\n    (BaseComponent: any): any => {\n        const factory = createFactory(BaseComponent)\n        class WithState extends Component {\n            state = {\n                stateValue:\n                    typeof initialState === 'function'\n                        ? // eslint-disable-next-line @typescript-eslint/ban-types\n                          (initialState as Function)(this.props)\n                        : initialState,\n            }\n\n            updateStateValue = (updateFn: any, callback: any) =>\n                this.setState(\n                    ({ stateValue }: any) => ({\n                        stateValue:\n                            typeof updateFn === 'function' ? updateFn(stateValue) : updateFn,\n                    }),\n                    callback\n                )\n\n            render() {\n                // @ts-expect-error due to how factory is typed\n                return factory({\n                    ...this.props,\n                    [stateName]: this.state.stateValue,\n                    [stateUpdaterName]: this.updateStateValue,\n                })\n            }\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n            return setDisplayName(wrapDisplayName(BaseComponent, 'withState'))(WithState)\n        }\n        return WithState\n    }\n"],"names":["getDisplayName","component","displayName","name","setStatic","key","value","BaseComponent","setDisplayName","hasOwnProperty","Object","prototype","is","x","y","shallowEqual","objA","objB","keysA","keys","keysB","length","i","call","wrapDisplayName","hocName","shouldUpdate","test","factory","createFactory","ShouldUpdate","shouldComponentUpdate","nextProps","this","props","render","Component","process","env","NODE_ENV","pure","hoc","compose","funcs","reduce","a","b","arg","pick","obj","result","withPropsOnChange","shouldMapOrKeys","propsMapper","shouldMap","WithPropsOnChange","state","computedProps","_this","prevProps","getDerivedStateFromProps","prevState","polyfill","defaultProps","DefaultProps","ownerProps","withProps","createProps","MapProps","setPropTypes","propTypes","withState","stateName","stateUpdaterName","initialState","WithState","stateValue","updateStateValue","updateFn","callback","setState"],"mappings":"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"}