{"version":3,"file":"nivo-express.umd.js","sources":["../src/memory-storage.ts","../src/index.ts","../src/validation.ts"],"sourcesContent":["import { ChartProps, ChartType } from '@nivo/static'\n\nexport interface StorageEntry<T extends ChartType> {\n    type: T\n    props: ChartProps<T>\n    url: string\n}\n\nconst store: Record<string, StorageEntry<ChartType>> = {}\n\nexport const set = (key: string, value: StorageEntry<ChartType>) => {\n    store[key] = value\n}\n\nexport const get = (key: string): StorageEntry<ChartType> | undefined => {\n    return store[key]\n}\n\nexport const dump = () => store\n","import { Router } from 'express'\nimport * as uuid from 'uuid'\nimport { forOwn } from 'lodash'\nimport { chartsMapping, ChartType, renderChart, samples } from '@nivo/static'\nimport { validate } from './validation'\nimport * as storage from './memory-storage'\n\nexport const nivo = Router()\n\nnivo.get('/', (req, res) => {\n    res.status(200).json({\n        samples: Object.keys(samples).map(sample => {\n            return `${req.protocol}://${req.get('host')}${req.originalUrl}/samples/${sample}.svg`\n        }),\n    })\n})\n\n// @ts-ignore\nforOwn(chartsMapping, ({ schema }, type: ChartType) => {\n    nivo.post(`/charts/${type}`, validate(schema), (req, res) => {\n        // @ts-ignore\n        const props = req.payload\n        const id = uuid.v4()\n        const url = `${req.protocol}://${req.get('host')}/r/${id}`\n\n        storage.set(id, {\n            type,\n            props,\n            url,\n        })\n\n        res.status(201).json({ id, url })\n    })\n})\n\nnivo.get('/r/:id', (req, res) => {\n    const { id } = req.params\n\n    const config = storage.get(req.params.id)\n    if (!config) {\n        return res\n            .set('Content-Type', 'text/plain')\n            .status(404)\n            .send(`no chart found for id \"${id}\"`)\n    }\n\n    // @ts-ignore\n    const rendered = renderChart(config, req.query)\n\n    res.set('Content-Type', 'image/svg+xml').status(200).send(rendered)\n})\n\nforOwn(samples, (config, id) => {\n    nivo.get(`/samples/${id}.svg`, (req, res) => {\n        // @ts-ignore\n        const rendered = renderChart(config, req.query)\n\n        res.set('Content-Type', 'image/svg+xml').status(200).send(rendered)\n    })\n})\n","import { Request, Response, NextFunction } from 'express'\nimport { omit } from 'lodash'\nimport Joi from 'joi'\n\nexport const validate = (\n    schema: Joi.Schema,\n    options: {\n        omit?: string[]\n    } = {}\n) => {\n    const { omit: omitProps } = options\n\n    return (req: Request, res: Response, next: NextFunction) => {\n        let data = req.body\n        if (omit) {\n            // @ts-ignore\n            data = omit(data, omitProps)\n        }\n\n        try {\n            // @ts-ignore\n            req.payload = schema.validate(data, {\n                abortEarly: true,\n                convert: true,\n            })\n            next()\n        } catch (err: any) {\n            return res.status(400).json({\n                // @ts-ignore\n                errors: err.details.map(({ message, path }) => {\n                    return `${message}${path ? ` (${path})` : ''}`\n                }),\n            })\n        }\n    }\n}\n"],"names":["store","nivo","Router","get","req","res","status","json","samples","Object","keys","map","sample","protocol","originalUrl","chartsMapping","type","schema","post","options","omitProps","omit","next","data","body","_omit","payload","validate","abortEarly","convert","err","errors","details","message","path","value","props","id","uuid","v4","url","key","params","config","set","send","rendered","renderChart","query"],"mappings":"m2BAQMA,EAAiD,GCD1CC,EAAOC,WAEpBD,EAAKE,IAAI,KAAK,SAACC,EAAKC,GAChBA,EAAIC,OAAO,KAAKC,KAAK,CACjBC,QAASC,OAAOC,KAAKF,WAASG,KAAI,SAAAC,UACpBR,EAAIS,eAAcT,EAAID,IAAI,QAAUC,EAAIU,wBAAuBF,2BAM9EG,iBAAe,WAAaC,OAAVC,IAAAA,OACrBhB,EAAKiB,gBAAgBF,ECfD,SACpBC,EACAE,YAAAA,IAAAA,EAEI,QAEUC,EAAcD,EAApBE,YAED,SAACjB,EAAcC,EAAeiB,OAC7BC,EAAOnB,EAAIoB,iBAGXD,EAAOE,UAAKF,EAAMH,QAKlBhB,EAAIsB,QAAUT,EAAOU,SAASJ,EAAM,CAChCK,YAAY,EACZC,SAAS,IAEbP,IACF,MAAOQ,UACEzB,EAAIC,OAAO,KAAKC,KAAK,CAExBwB,OAAQD,EAAIE,QAAQrB,KAAI,gBAAGsB,IAAAA,QAASC,IAAAA,YACtBD,GAAUC,OAAYA,MAAU,WDX7BP,CAASV,IAAS,SAACb,EAAKC,ODTxB8B,ECWnBC,EAAQhC,EAAIsB,QACZW,EAAKC,EAAKC,KACVC,EAASpC,EAAIS,eAAcT,EAAID,IAAI,cAAakC,EDb7BF,ECeT,CACZnB,KAAAA,EACAoB,MAAAA,EACAI,IAAAA,GDjBRxC,ECcgBqC,GDdHF,ECoBT9B,EAAIC,OAAO,KAAKC,KAAK,CAAE8B,GAAAA,EAAIG,IAAAA,UAInCvC,EAAKE,IAAI,UAAU,SAACC,EAAKC,ODrBLoC,ECsBRJ,EAAOjC,EAAIsC,OAAXL,GAEFM,GDxBUF,ECwBWrC,EAAIsC,OAAOL,GDvB/BrC,EAAMyC,QCwBRE,SACMtC,EACFuC,IAAI,eAAgB,cACpBtC,OAAO,KACPuC,+BAA+BR,WAIlCS,EAAWC,cAAYJ,EAAQvC,EAAI4C,OAEzC3C,EAAIuC,IAAI,eAAgB,iBAAiBtC,OAAO,KAAKuC,KAAKC,gBAGvDtC,WAAS,SAACmC,EAAQN,GACrBpC,EAAKE,gBAAgBkC,UAAU,SAACjC,EAAKC,OAE3ByC,EAAWC,cAAYJ,EAAQvC,EAAI4C,OAEzC3C,EAAIuC,IAAI,eAAgB,iBAAiBtC,OAAO,KAAKuC,KAAKC"}