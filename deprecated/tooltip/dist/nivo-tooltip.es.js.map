{"version":3,"file":"nivo-tooltip.es.js","sources":["../src/TooltipWrapper.tsx","../src/Chip.tsx","../src/BasicTooltip.tsx","../src/TableTooltip.tsx","../src/CrosshairLine.tsx","../src/Crosshair.tsx","../src/context.ts","../src/hooks.ts","../src/Tooltip.tsx","../src/TooltipProvider.tsx"],"sourcesContent":["import { memo, useRef, PropsWithChildren, CSSProperties } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig, useMeasure } from '@nivo/core'\nimport { TooltipStateContextDataVisible } from './context'\n\nconst TOOLTIP_OFFSET = 14\n\nconst tooltipStyle = {\n    pointerEvents: 'none' as CSSProperties['pointerEvents'],\n    position: 'absolute' as CSSProperties['position'],\n    zIndex: 10,\n    top: 0,\n    left: 0,\n}\n\nconst translate = (x: number, y: number) => `translate(${x}px, ${y}px)`\n\ninterface TooltipWrapperProps {\n    position: TooltipStateContextDataVisible['position']\n    anchor: TooltipStateContextDataVisible['anchor']\n}\n\nexport const TooltipWrapper = memo<PropsWithChildren<TooltipWrapperProps>>(\n    ({ position, anchor, children }) => {\n        const theme = useTheme()\n        const { animate, config: springConfig } = useMotionConfig()\n        const [measureRef, bounds] = useMeasure()\n        const previousPosition = useRef<[number, number] | false>(false)\n\n        let to = undefined\n        let immediate = false\n        const hasDimension = bounds.width > 0 && bounds.height > 0\n\n        let x = Math.round(position[0])\n        let y = Math.round(position[1])\n\n        if (hasDimension) {\n            if (anchor === 'top') {\n                x -= bounds.width / 2\n                y -= bounds.height + TOOLTIP_OFFSET\n            } else if (anchor === 'right') {\n                x += TOOLTIP_OFFSET\n                y -= bounds.height / 2\n            } else if (anchor === 'bottom') {\n                x -= bounds.width / 2\n                y += TOOLTIP_OFFSET\n            } else if (anchor === 'left') {\n                x -= bounds.width + TOOLTIP_OFFSET\n                y -= bounds.height / 2\n            } else if (anchor === 'center') {\n                x -= bounds.width / 2\n                y -= bounds.height / 2\n            }\n\n            to = {\n                transform: translate(x, y),\n            }\n\n            if (!previousPosition.current) {\n                immediate = true\n            }\n\n            previousPosition.current = [x, y]\n        }\n\n        const animatedProps = useSpring<{\n            transform: string\n        }>({\n            to,\n            config: springConfig,\n            immediate: !animate || immediate,\n        })\n\n        const style = {\n            ...tooltipStyle,\n            ...theme.tooltip,\n            transform: animatedProps.transform ?? translate(x, y),\n        }\n\n        return (\n            <animated.div ref={measureRef} style={style}>\n                {children}\n            </animated.div>\n        )\n    }\n)\n\nTooltipWrapper.displayName = 'TooltipWrapper'\n","import { CSSProperties, memo } from 'react'\n\ninterface ChipProps {\n    size?: number\n    color: string\n    style?: CSSProperties\n}\n\nexport const Chip = memo<ChipProps>(({ size = 12, color, style = {} }) => (\n    <span style={{ display: 'block', width: size, height: size, background: color, ...style }} />\n))\n","import { memo, ReactNode } from 'react'\nimport { useTheme, ValueFormat, useValueFormatter } from '@nivo/core'\nimport { Chip } from './Chip'\n\nexport interface BasicTooltipProps {\n    id: ReactNode\n    value?: number | string | Date\n    format?: ValueFormat<number | string | Date>\n    color?: string\n    enableChip?: boolean\n    /**\n     * @deprecated This should be replaced by custom tooltip components.\n     */\n    renderContent?: () => JSX.Element\n}\n\nexport const BasicTooltip = memo<BasicTooltipProps>(\n    ({ id, value: _value, format, enableChip = false, color, renderContent }) => {\n        const theme = useTheme()\n        const formatValue = useValueFormatter<number | string | Date>(format ?? '')\n\n        let content: JSX.Element\n        if (typeof renderContent === 'function') {\n            content = renderContent()\n        } else {\n            let value = _value\n            if (formatValue !== undefined && value !== undefined) {\n                value = formatValue(value)\n            }\n            content = (\n                <div style={theme.tooltip.basic}>\n                    {enableChip && <Chip color={color!} style={theme.tooltip.chip} />}\n                    {value !== undefined ? (\n                        <span>\n                            {id}: <strong>{`${value}`}</strong>\n                        </span>\n                    ) : (\n                        id\n                    )}\n                </div>\n            )\n        }\n\n        return <div style={theme.tooltip.container}>{content}</div>\n    }\n)\n","import { CSSProperties, memo, ReactNode } from 'react'\nimport { useTheme } from '@nivo/core'\n\nconst tableStyle = {\n    width: '100%',\n    borderCollapse: 'collapse' as CSSProperties['borderCollapse'],\n}\n\ninterface TableTooltipProps {\n    title?: ReactNode\n    renderContent?: () => JSX.Element\n    rows?: ReactNode[][]\n}\n\nexport const TableTooltip = memo(({ title, rows = [], renderContent }: TableTooltipProps) => {\n    const theme = useTheme()\n\n    if (!rows.length) return null\n\n    let content\n    if (typeof renderContent === 'function') {\n        content = renderContent()\n    } else {\n        content = (\n            <div>\n                {title && title}\n                <table style={{ ...tableStyle, ...theme.tooltip.table }}>\n                    <tbody>\n                        {rows.map((row, i) => (\n                            <tr key={i}>\n                                {row.map((column, j) => (\n                                    <td key={j} style={theme.tooltip.tableCell}>\n                                        {column}\n                                    </td>\n                                ))}\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    return <div style={theme.tooltip.container}>{content}</div>\n})\n\nTableTooltip.displayName = 'TableTooltip'\n","import { CSSProperties, memo, useMemo } from 'react'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\n\ninterface CrosshairLineProps {\n    x0: number\n    x1: number\n    y0: number\n    y1: number\n}\n\nexport const CrosshairLine = memo(({ x0, x1, y0, y1 }: CrosshairLineProps) => {\n    const theme = useTheme()\n    const { animate, config: springConfig } = useMotionConfig()\n    const style = useMemo(\n        () => ({\n            ...theme.crosshair.line,\n            pointerEvents: 'none' as CSSProperties['pointerEvents'],\n        }),\n        [theme.crosshair.line]\n    )\n\n    const animatedProps = useSpring({\n        x1: x0,\n        x2: x1,\n        y1: y0,\n        y2: y1,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return <animated.line {...animatedProps} fill=\"none\" style={style} />\n})\n\nCrosshairLine.displayName = 'CrosshairLine'\n","import { memo } from 'react'\nimport { CrosshairLine } from './CrosshairLine'\nimport { CrosshairType } from './types'\n\ninterface CrosshairProps {\n    width: number\n    height: number\n    type: CrosshairType\n    x: number\n    y: number\n}\n\nexport const Crosshair = memo(({ width, height, type, x, y }: CrosshairProps) => {\n    let xLine\n    let yLine\n    if (type === 'cross') {\n        xLine = { x0: x, x1: x, y0: 0, y1: height }\n        yLine = { x0: 0, x1: width, y0: y, y1: y }\n    } else if (type === 'top-left') {\n        xLine = { x0: x, x1: x, y0: 0, y1: y }\n        yLine = { x0: 0, x1: x, y0: y, y1: y }\n    } else if (type === 'top') {\n        xLine = { x0: x, x1: x, y0: 0, y1: y }\n    } else if (type === 'top-right') {\n        xLine = { x0: x, x1: x, y0: 0, y1: y }\n        yLine = { x0: x, x1: width, y0: y, y1: y }\n    } else if (type === 'right') {\n        yLine = { x0: x, x1: width, y0: y, y1: y }\n    } else if (type === 'bottom-right') {\n        xLine = { x0: x, x1: x, y0: y, y1: height }\n        yLine = { x0: x, x1: width, y0: y, y1: y }\n    } else if (type === 'bottom') {\n        xLine = { x0: x, x1: x, y0: y, y1: height }\n    } else if (type === 'bottom-left') {\n        xLine = { x0: x, x1: x, y0: y, y1: height }\n        yLine = { x0: 0, x1: x, y0: y, y1: y }\n    } else if (type === 'left') {\n        yLine = { x0: 0, x1: x, y0: y, y1: y }\n    } else if (type === 'x') {\n        xLine = { x0: x, x1: x, y0: 0, y1: height }\n    } else if (type === 'y') {\n        yLine = { x0: 0, x1: width, y0: y, y1: y }\n    }\n\n    return (\n        <>\n            {xLine && <CrosshairLine x0={xLine.x0} x1={xLine.x1} y0={xLine.y0} y1={xLine.y1} />}\n            {yLine && <CrosshairLine x0={yLine.x0} x1={yLine.x1} y0={yLine.y0} y1={yLine.y1} />}\n        </>\n    )\n})\n\nCrosshair.displayName = 'Crosshair'\n","import { createContext, MouseEvent } from 'react'\nimport { TooltipAnchor } from './types'\n\nexport interface TooltipActionsContextData {\n    showTooltipAt: (\n        content: JSX.Element,\n        position: [number, number],\n        anchor?: TooltipAnchor\n    ) => void\n    showTooltipFromEvent: (content: JSX.Element, event: MouseEvent, anchor?: TooltipAnchor) => void\n    hideTooltip: () => void\n}\n\nconst defaultActions: TooltipActionsContextData = {\n    showTooltipAt: () => {},\n    showTooltipFromEvent: () => {},\n    hideTooltip: () => {},\n}\n\nexport const TooltipActionsContext = createContext<TooltipActionsContextData>(defaultActions)\n\nexport interface TooltipStateContextDataVisible {\n    isVisible: true\n    position: [number, number]\n    content: JSX.Element\n    anchor: TooltipAnchor\n}\n\nexport interface TooltipStateContextDataHidden {\n    isVisible: false\n    position: [null, null]\n    content: null\n    anchor: null\n}\n\nexport type TooltipStateContextData = TooltipStateContextDataVisible | TooltipStateContextDataHidden\n\nexport const hiddenTooltipState: TooltipStateContextDataHidden = {\n    isVisible: false,\n    position: [null, null],\n    content: null,\n    anchor: null,\n}\n\nexport const TooltipStateContext = createContext<TooltipStateContextData>(hiddenTooltipState)\n","import { useState, useContext, useCallback, RefObject, MouseEvent, useMemo } from 'react'\nimport {\n    TooltipActionsContext,\n    TooltipActionsContextData,\n    TooltipStateContext,\n    TooltipStateContextData,\n    hiddenTooltipState,\n} from './context'\nimport { TooltipAnchor } from './types'\n\nexport const useTooltipHandlers = (container: RefObject<HTMLDivElement>) => {\n    const [state, setState] = useState<TooltipStateContextData>(hiddenTooltipState)\n\n    const showTooltipAt: TooltipActionsContextData['showTooltipAt'] = useCallback(\n        (content: JSX.Element, [x, y]: [number, number], anchor: TooltipAnchor = 'top') => {\n            setState({\n                isVisible: true,\n                position: [x, y],\n                anchor,\n                content,\n            })\n        },\n        [setState]\n    )\n\n    const showTooltipFromEvent: TooltipActionsContextData['showTooltipFromEvent'] = useCallback(\n        (content: JSX.Element, event: MouseEvent, anchor: TooltipAnchor = 'top') => {\n            const bounds = container.current\n                ? container.current.getBoundingClientRect()\n                : { left: 0, top: 0, width: 0 }\n            const x = event.clientX - bounds.left\n            const y = event.clientY - bounds.top\n\n            if (anchor === 'left' || anchor === 'right') {\n                if (x < bounds.width / 2) anchor = 'right'\n                else anchor = 'left'\n            }\n\n            setState({\n                isVisible: true,\n                position: [x, y],\n                anchor,\n                content,\n            })\n        },\n        [container, setState]\n    )\n\n    const hideTooltip = useCallback(() => {\n        setState(hiddenTooltipState)\n    }, [setState])\n\n    const actions: TooltipActionsContextData = useMemo(() => {\n        return {\n            showTooltipAt,\n            showTooltipFromEvent,\n            hideTooltip,\n        }\n    }, [showTooltipAt, showTooltipFromEvent, hideTooltip])\n\n    return {\n        actions,\n        state,\n    }\n}\n\nexport const useTooltip = () => {\n    const context = useContext(TooltipActionsContext)\n    if (context === undefined) {\n        throw new Error('useTooltip must be used within a TooltipProvider')\n    }\n\n    return context\n}\n\nexport const useTooltipState = () => {\n    const context = useContext(TooltipStateContext)\n    if (context === undefined) {\n        throw new Error('useTooltipState must be used within a TooltipProvider')\n    }\n\n    return context\n}\n","import { useTooltipState } from './hooks'\nimport { TooltipWrapper } from './TooltipWrapper'\nimport { TooltipStateContextData, TooltipStateContextDataVisible } from './context'\n\nexport const isVisibleTooltipState = (\n    state: TooltipStateContextData\n): state is TooltipStateContextDataVisible => state.isVisible\n\nexport const Tooltip = () => {\n    const state = useTooltipState()\n\n    if (!isVisibleTooltipState(state)) {\n        return null\n    }\n\n    return (\n        <TooltipWrapper position={state.position} anchor={state.anchor}>\n            {state.content}\n        </TooltipWrapper>\n    )\n}\n","import { PropsWithChildren, RefObject } from 'react'\nimport { TooltipActionsContext, TooltipStateContext } from './context'\nimport { useTooltipHandlers } from './hooks'\n\ninterface TooltipProviderProps {\n    container: RefObject<HTMLDivElement>\n}\n\nexport const TooltipProvider = ({\n    container,\n    children,\n}: PropsWithChildren<TooltipProviderProps>) => {\n    const { actions, state } = useTooltipHandlers(container)\n\n    return (\n        <TooltipActionsContext.Provider value={actions}>\n            <TooltipStateContext.Provider value={state}>{children}</TooltipStateContext.Provider>\n        </TooltipActionsContext.Provider>\n    )\n}\n"],"names":["tooltipStyle","pointerEvents","position","zIndex","top","left","translate","x","y","TooltipWrapper","memo","anchor","children","theme","useTheme","useMotionConfig","animate","springConfig","config","useMeasure","measureRef","bounds","previousPosition","useRef","to","undefined","immediate","hasDimension","width","height","Math","round","transform","current","animatedProps","useSpring","style","tooltip","_jsx","animated","div","ref","displayName","Chip","size","color","display","background","BasicTooltip","content","id","_value","value","format","enableChip","renderContent","formatValue","useValueFormatter","_jsxs","basic","chip","container","tableStyle","borderCollapse","TableTooltip","title","rows","length","table","map","row","i","column","j","tableCell","CrosshairLine","x0","x1","y0","y1","useMemo","crosshair","line","x2","y2","fill","Crosshair","xLine","yLine","type","TooltipActionsContext","createContext","showTooltipAt","showTooltipFromEvent","hideTooltip","hiddenTooltipState","isVisible","TooltipStateContext","useTooltipHandlers","useState","state","setState","useCallback","event","getBoundingClientRect","clientX","clientY","actions","useTooltip","context","useContext","Error","useTooltipState","isVisibleTooltipState","Tooltip","TooltipProvider","Provider"],"mappings":"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"}